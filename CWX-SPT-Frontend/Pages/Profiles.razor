@page "/Profiles"
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer Class="px-8 my-8" MaxWidth="MaxWidth.Large">
    <MudContainer Class="mt-n6 mb-3 pa-0 d-flex justify-start gap-2">
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.PersonAdd" Size="Size.Large" @onclick="() => RunAddTask()" Variant="Variant.Outlined" Disabled="@(!IsConnected)">Create New Profile</MudButton>
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Login" Size="Size.Large" Variant="Variant.Outlined" Disabled="@(!IsConnected)">Login with details</MudButton>
    </MudContainer>
    <MudGrid>
        @foreach (var profile in ProfilesList)
        {
            <ProfileCardComponent Profile="@profile" @bind-ProfileList="ProfilesList" />
        }
        @if (ProfilesList.Count == 0 && IsConnected)
        {
            <MudItem sm="12">
                <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">The server you are connected too, does not show profiles, please use the above "Login with details" button.</MudAlert>
            </MudItem>
        }
        else if (ProfilesList.Count == 0 && !IsConnected)
        {
            <MudItem sm="12">
                <MudAlert Severity="Severity.Info" Variant="Variant.Outlined">Please connect to a Server first!</MudAlert>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {

    public List<ServerProfileClass> ProfilesList { get; set; } = ServerHelper.Instance.ProfileList;
    public bool IsConnected { get; set; } = ServerHelper.Instance.ConnectedServer != null;

    private async Task RunAddTask()
    {
        var dialog = await DialogService.ShowAsync<ProfileAddDialog>("ProfileAddDialog", SettingsHelper.Instance.DialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            ProfilesList = ServerHelper.Instance.ProfileList;
        }
    }
}