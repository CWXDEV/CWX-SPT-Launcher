@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Class="py-4 card-overflow">
            <MudForm Model="Request" @bind-IsValid="@success" Class="gap-2 mt-3">
                <MudSelect @bind-Value="Request.Edition" Variant="Variant.Outlined" Label="Edition" Margin="Margin.Dense" Dense="true" Required="true">
                    @foreach (var edition in serverEditions)
                    {
                        <MudSelectItem Value="@edition"/>
                    }
                </MudSelect>
                <MudTextField Immediate="true" @bind-Value="Request.Username" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true"/>
                <PasswordFieldComponent @bind-Password="Request.Password"/>
                @if (tooltipText != "")
                {
                    <MudCard Class="pa-2 edition-text" Outlined="true"><MudText>@tooltipText</MudText></MudCard>
                }
            </MudForm>
            <MudContainer Class="mt-3 d-flex justify-end pa-0 gap-2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" @onclick="Submit">Add</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Default" @onclick="UserCancelled">Cancel</MudButton>
            </MudContainer>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    private bool success;
    public RegisterRequest Request = new RegisterRequest();
    private List<string> serverEditions { get; } = ServerHelper.Instance.ProfileTypes.Keys.ToList();
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    private CancellationTokenSource token { get; set; }
    private bool UserCancel { get; set; }

    private string tooltipText
    {
        get
        {
            return ServerHelper.Instance.ProfileTypes.GetValueOrDefault(Request.Edition, "");
        }
    }

    private async void Submit()
    {
        try
        {
            token = new CancellationTokenSource(TimeSpan.FromSeconds(10));
            var result = await ServerHelper.Instance.PutAsync<RegisterResponse, RegisterRequest>("/launcher/v2/Register", Request, token.Token);
            if (!result)
            {
                AbortOrFail();
                return;
            }

            token?.Dispose();
        }
        catch (TaskCanceledException e) when (token is { IsCancellationRequested: true })
        {
            AbortOrFail();
            return;
        }

        StateHasChanged();
        Snackbar.Add("Added Profile!", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void AbortOrFail()
    {
        if (!UserCancel)
        {
            Snackbar.Add("Unable to Add profile!", Severity.Error);
        }

        MudDialog.Cancel();
    }

    private void UserCancelled()
    {
        UserCancel = true;
        token?.Cancel();
        MudDialog.Cancel();
    }

}