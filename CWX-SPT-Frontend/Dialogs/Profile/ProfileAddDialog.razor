@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Class="py-4 card-overflow">
            <MudForm Model="Profile" @bind-IsValid="@success" Class="gap-2 mt-3">
                <MudSelect @bind-Value="Profile.edition" Variant="Variant.Outlined" Label="Edition" Margin="Margin.Dense" Dense="true">
                    @foreach (var edition in serverEditions)
                    {
                        <MudSelectItem Value="@edition">@edition</MudSelectItem>
                    }
                </MudSelect>
                <MudTextField Immediate="true" @bind-Value="Profile.username" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true"/>
                <MudTextField Immediate="true" @bind-Value="Profile.password" Label="Password" Variant="Variant.Outlined" Margin="Margin.Dense"/>
            </MudForm>
            <MudContainer Class="mt-3 d-flex justify-end pa-0 gap-2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto" @onclick="() => Submit()">Add</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Default" @onclick="() => UserCancelled()">Cancel</MudButton>
            </MudContainer>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    private bool success;
    public RegisterRequest Profile = new RegisterRequest();
    private List<string> serverEditions { get; set; } = ServerHelper.Instance.ServerInfo.editions;
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    private CancellationTokenSource token { get; set; }
    private bool UserCancel { get; set; } = false;

    private async void Submit()
    {
        try
        {
            token = new CancellationTokenSource(TimeSpan.FromSeconds(10));
            await ServerHelper.Instance.SendProfileRegister(Profile, token.Token);
            token.Dispose();
        }
        catch (TaskCanceledException e) when (token.IsCancellationRequested)
        {
            AbortOrFail();
            return;
        }

        StateHasChanged();
        Snackbar.Add("Added Profile!", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void AbortOrFail()
    {
        if (!UserCancel)
        {
            Snackbar.Add("Error connecting to server!", Severity.Error);
        }

        ServerHelper.Instance.LogoutAndDispose();
        MudDialog.Cancel();
    }

    private void UserCancelled()
    {
        UserCancel = true;
        token.Cancel();
        MudDialog.Cancel();
    }

}