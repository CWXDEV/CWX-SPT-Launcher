@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Class="py-4 card-overflow">
            <MudContainer Class="d-flex flex-column align-center gap-4">
                @if (Tasks <= ELoginTaskResults.Types)
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large"/>
                }
                else if (Tasks == ELoginTaskResults.Success)
                {
                }
                else if (Tasks == ELoginTaskResults.Failed)
                {
                }
                else if (Tasks == ELoginTaskResults.Aborted)
                {
                }
                <MudText>@TaskText</MudText>
            </MudContainer>
            <MudContainer Class="mt-3 d-flex justify-end pa-0 gap-2">
                <MudButton Variant="Variant.Filled" Color="Color.Error" Class="ml-auto" @onclick="() => Cancel()">Cancel</MudButton>
            </MudContainer>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    private ServerHelper serverHelper = ServerHelper.Instance;
    private ELoginTaskResults Tasks = ELoginTaskResults.NotStarted;
    private string TaskText = "";
    [Parameter] public Servers Server { get; set; }
    [CascadingParameter] private MudDialogInstance MudDialog { get; set; }
    private CancellationTokenSource token { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _ = StartLoginTasks();
    }
    
    private async Task StartLoginTasks()
    {
        Tasks = ELoginTaskResults.Started;
        TaskText = "Starting login tasks";

        try
        {
            // test connection
            token = new CancellationTokenSource(TimeSpan.FromSeconds(3));
            Tasks = ELoginTaskResults.Connection;
            TaskText = "Checking connection to server";
            await Task.Delay(20); // artificial to hopefully fix "focus on invalid element"
            await serverHelper.IsServerReachable(Server, token.Token);
        }
        catch (TaskCanceledException e) when (token.IsCancellationRequested)
        {
            AbortOrFail($"user cancelled request: {Tasks.ToString()}");
            return;
        }
        catch (TaskCanceledException e)
        {
            AbortOrFail($"Request timed out: {Tasks.ToString()}");
            return;
        }
        token.Dispose();

        try
        {
            // get profile data
            token = new CancellationTokenSource(TimeSpan.FromMilliseconds(15000));
            Tasks = ELoginTaskResults.Profiles;
            TaskText = "Getting profiles from server";
            StateHasChanged();
            await serverHelper.GetServerProfiles(token.Token);
        }
        catch (TaskCanceledException e) when (token.IsCancellationRequested)
        {
            AbortOrFail($"user cancelled request: {Tasks.ToString()}");
            return;
        }
        catch (TaskCanceledException e)
        {
            AbortOrFail($"Request timed out: {Tasks.ToString()}");
            return;
        }
        token.Dispose();
        
        try
        {
            // get Creation data
            token = new CancellationTokenSource(TimeSpan.FromMilliseconds(15000));
            Tasks = ELoginTaskResults.Types;
            TaskText = "Getting profile creation data";
            StateHasChanged();
            await serverHelper.GetCreationTypes(token.Token);
        }
        catch (TaskCanceledException e) when (token.IsCancellationRequested)
        {
            AbortOrFail($"user cancelled request: {Tasks.ToString()}");
            return;
        }
        catch (TaskCanceledException e)
        {
            AbortOrFail($"Request timed out: {Tasks.ToString()}");
            return;
        }
        token.Dispose();
        
        Tasks = ELoginTaskResults.Success;
        TaskText = "Check the Profiles in the NavMenu!";
        StateHasChanged();
        Submit();
    }

    private void AbortOrFail(string message)
    {
        Console.WriteLine(message);
        token.Dispose();
        ServerHelper.Instance.LogoutAndDispose();
        Cancel();
    }
    
    private void Submit()
    {
        MudDialog.Close(DialogResult.Ok(Server));
        Snackbar.Add("Logged In. Visit Profiles Page!", Severity.Success);
    }

    private void Cancel()
    {
        token.Cancel();
        MudDialog.Cancel();
    }
}