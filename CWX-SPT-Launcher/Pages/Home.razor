@page "/"
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer Class="px-8 my-8" MaxWidth="MaxWidth.Large">
    <MudContainer Class="mt-n6 mb-3 pa-0 d-flex justify-space-between">
        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddToQueue" Size="Size.Large" @onclick="() => RunAddTask()" Variant="Variant.Filled">Add New Server</MudButton>
        <MudIconButton Icon="@((denseMode) ? @Icons.Material.Filled.ViewModule : @Icons.Material.Filled.ViewHeadline)" Variant="Variant.Filled" Color="Color.Tertiary" Size="Size.Large" OnClick="() => ChangeDenseMode()"/>
    </MudContainer>
    <MudGrid>
        @if (!denseMode)
        {
            @foreach (var server in _servers)
            {
                <MudItem sm="12" md="4">
                    <MudPaper Elevation="2" Class="pa-4 d-flex flex-column flex-grow-1 gap-2">
                        <MudTextField ShrinkLabel @bind-Value="server.Ip" Label="IP" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                        <MudTextField ShrinkLabel @bind-Value="server.Password" Label="Password" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                        <MudTextField ShrinkLabel @bind-Value="server.DefaultProfile" Label="Profile" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                        <MudSwitch @bind-Value="server.RemoteServer" Label="IsLocal" ThumbIcon="@(server.RemoteServer ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(server.RemoteServer ? Color.Success : Color.Error)" ReadOnly="true"/>
                        <MudContainer Class="justify-end d-flex mt-n10 pa-0">
                            <MudIconButton Color="Color.Info" Icon="@Icons.Material.Filled.Build" Size="Size.Small" @onclick="() => RunEditTask(server)"/>
                            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" @onclick="() => RunDeleteTask(server)"/>
                        </MudContainer>
                    </MudPaper>
                </MudItem>
            }
        }
        else
        {
            @foreach (var server in _servers)
            {
                <MudItem sm="12">
                    <MudPaper Elevation="2" Class="pa-4 d-flex flex-row flex-grow-1 gap-4">
                        <MudTextField ShrinkLabel @bind-Value="server.Ip" Label="IP" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                        <MudTextField ShrinkLabel @bind-Value="server.Password" Label="Password" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                        <MudTextField ShrinkLabel @bind-Value="server.DefaultProfile" Label="Profile" ReadOnly="true" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                        <MudSwitch Class="mt-1" @bind-Value="server.RemoteServer" Label="IsLocal" ThumbIcon="@(server.RemoteServer ? Icons.Material.Filled.Done : Icons.Material.Filled.Close)" ThumbIconColor="@(server.RemoteServer ? Color.Success : Color.Error)" ReadOnly="true"/>
                        <MudContainer Class="justify-end d-flex flex-1 pa-0">
                            <MudIconButton Color="Color.Info" Icon="@Icons.Material.Filled.Build" Size="Size.Small" @onclick="() => RunEditTask(server)"/>
                            <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" @onclick="() => RunDeleteTask(server)"/>
                        </MudContainer>
                    </MudPaper>
                </MudItem>
            }
        }
    </MudGrid>
</MudContainer>

@code {
    private bool denseMode = SettingsHelper.Instance.GetSettings().AppSettings.HomePageDenseMode;
    private List<ServersClass> _servers = SettingsHelper.Instance.GetSettings().Servers;

    private async void ChangeDenseMode()
    {
        denseMode = !denseMode;
        SettingsHelper.Instance.SetHomePageDenseMode(denseMode);
    }

    private async void RemoveServerFromList(ServersClass server)
    {
        _servers.Remove(server);
        SettingsHelper.Instance.SetServerSettings(_servers);
    }

    private async void AddServerToList(ServersClass server)
    {
        _servers.Add(server);
        SettingsHelper.Instance.SetServerSettings(_servers);
    }

    private async void EditServerFromList(ServersClass server)
    {
        var serverToChange = _servers.FirstOrDefault(x => x.Ip == server.Ip);
        serverToChange.RemoteServer = server.RemoteServer;
        serverToChange.Ip = server.Ip;
        serverToChange.Password = server.Password;
        serverToChange.DefaultProfile = server.DefaultProfile;
        StateHasChanged();

        SettingsHelper.Instance.SetServerSettings(_servers);
    }

    private async Task RunAddTask()
    {
        var dialog = await DialogService.ShowAsync<ServerAddDialog>("ServerAddDialog", SettingsHelper.Instance.DialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            AddServerToList(result.Data as ServersClass);
        }
    }

    private async Task RunDeleteTask(ServersClass server)
    {
        var dialog = await DialogService.ShowAsync<ServerRemoveDialog>("ServerRemoveDialog", SettingsHelper.Instance.DialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            RemoveServerFromList(server);
        }
    }

    private async Task RunEditTask(ServersClass server)
    {
        var param = new DialogParameters();
        param.Add("_server", server);

        var dialog = await DialogService.ShowAsync<ServerEditDialog>("ServerEditDialog", param, SettingsHelper.Instance.DialogOptions);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            EditServerFromList(server);
        }
    }
}